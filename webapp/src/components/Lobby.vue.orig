hi<template>
    <div class="lobby-wrapper">
        <div class="player-list-section">
            <span class="h1 lobby-title">Lobby</span>
            <transition-group name="lobby-message-group" tag="div" style="position: relative; max-height: 40px;"
                              mode="out-in">
                <span v-if="gameIsReadyToStart && !lobby.termAssignmentStartsTimer" class="lobby-message-group-item"> {{'Game is ready to start.' }}</span>
                <span v-if="!gameIsReadyToStart && !lobby.termAssignmentStartsTimer" class="lobby-message-group-item"> {{  ('Players Ready ' + readyPlayersCount + '/' + playersCount)}}</span>
                <div v-if="lobby.termAssignmentStartsTimer" class="lobby-message-group-item multiple-items"><span> Game will begin in </span>
                    <timer-container class="timer-layout plain-timer" v-bind:timer="lobby.termAssignmentStartsTimer"
                                     v-bind:format="'seconds-unit'"></timer-container>
                </div>
            </transition-group>
            <transition-group tag="div" name="lobby-players-transition" mode="out-in" class="player-list-container">
                <div class="lobby-players-transition-item" v-for="pl in sortedPlayers" :key="pl.id">
                    <lobby-avatar v-bind:lobbyPlayer="pl"
                                  :class="{'is-local-player': pl.id === localPlayerId}"
                                  v-bind:displayKickIcon="pl.role !== 'host' && localPlayerIsHost"></lobby-avatar>

                </div>
            </transition-group>
        </div>
        <div class="local-player-section">
            <avatar-configurator v-bind:globalPlayerCookie="localPlayerConfig"
                                 v-bind:disabled="(localLobbyPlayer.ready && localLobbyPlayer.role !== 'host') || lobby.termAssignmentStartsTimer"
                                 v-bind:isReady="localLobbyPlayer.ready"
                                 v-on:onToggleSelectorsHidden="avatarConfiguratorToggle"
                                 v-on:onChangeGlobalPlayerCookie="onAvatarConfiguratorChange($event)"></avatar-configurator>

            <span v-if="lobby.termAssignmentStartsTimer" class="game-starts-timer-text plain-btn m-10px-v">
                <span>Get Ready!</span>
                </span>

            <button :disabled="!gameIsReadyToStart || lobby.termAssignmentStartsTimer"
                    :class="{'disabled':!gameIsReadyToStart}"
                    v-if="(!editingAvatarElementType && localLobbyPlayer.role === 'host') && !lobby.termAssignmentStartsTimer"
                    class="main-button m-10px-v lobby-start-game-btn"
                    v-on:click="startGame()">
                <img src="../assets/create-game-icon-colored.svg">
                {{ 'start game' }}
            </button>

            <button v-if="(!editingAvatarElementType && localLobbyPlayer.role !== 'host') && !lobby.termAssignmentStartsTimer"
                    class="main-button m-10px-v"
                    v-on:click="togglePlayerReady()">
                {{ !localLobbyPlayer.ready ? 'I\'m ready' : 'I\'m not ready' }}
            </button>
            <button v-if="editingAvatarElementType" class="main-button main-button-placeholder m-10px-v">
                {{ 'placeholder' }}
            </button>
        </div>
        <div class="game-settings-section">
            <div class="lobby-copied-to-clipboard" v-if="copiedToClipboard">copied to clipboard</div>
            <button class="main-button m-1vw lobby-copy-to-clipboard" :class="{'hide-copy-btn':copiedToClipboard}"
                    v-on:click="onLobbyCopyShareLink()">
                <img src="../assets/copy-colored.svg">
                invite link
            </button>
            <div class="game-settings-content">
                <div class="language-wrapper">
                    <span class="config-title">Language</span>
                    <language-selector v-bind:selection="localPlayerConfig.language"
                                       v-bind:disabled="localLobbyPlayer.role !== 'host' || lobby.termAssignmentStartsTimer"
                                       v-on:onLangSelectionChange="onGameLanguageChange"
                                       class="language-selector"></language-selector>
                </div>
                <div class="time-to-post-question-wrapper">
                    <span class="config-title">Time To Post Question</span>
                    <game-config-carousel-selector v-bind:options="timeOptions"
                                                   v-bind:disabled="localLobbyPlayer.role !== 'host' || lobby.termAssignmentStartsTimer"
                                                   v-bind:selection="timePerQuestion"
                                                   v-on:selectionChange="updateTimePerQuestion($event)"
                    ></game-config-carousel-selector>
                </div>
                <div class="time-to-answer-wrapper">
                    <span class="config-title">Time to Answer Question</span>
                    <game-config-carousel-selector v-bind:options="timeOptions"
                                                   v-bind:disabled="localLobbyPlayer.role !== 'host' || lobby.termAssignmentStartsTimer"
                                                   v-bind:selection="timeToAnswer"
                                                   v-on:selectionChange="updateTimeToAnswer($event)"
                    ></game-config-carousel-selector>
                </div>
                <div class="identity-assignment-wrapper">
                    <span class="config-title">Identity Assignment</span>
                    <list-selector v-bind:title="'How should the identity be assigned?'"
                                   v-bind:disabled="localLobbyPlayer.role !== 'host' || lobby.termAssignmentStartsTimer"
                                   v-bind:options="displayedAssignmentModeOptions"
                                   v-bind:selection="lobby.gameConfig.termSelectionMode"
                                   v-on:onListSelectionChange="onGuessedTermSelectionChange"
                    ></list-selector>
                </div>
                <div class="identity-assignment-wrapper">
                    <span class="config-title">Hints Per Game</span>
                    <HintsPerGameSelector
                            v-bind:selection="lobby.gameConfig.hintsPerPlayer"
                            v-bind:disabled="localLobbyPlayer.role !== 'host' || lobby.termAssignmentStartsTimer"
                            v-on:onHintSelectionChange="onHintSelectionChange"
                    ></HintsPerGameSelector>
                </div>

                <div class="allow-cheat-sheet-selection"
                     :class="{'disabled':localLobbyPlayer.role !== 'host' || lobby.termAssignmentStartsTimer}">
                    <div class="pseudo-checkbox" v-on:click="updateAllowCheatSheet()">
                        <img v-if="allowCheatSheet" src="../assets/check.svg">
                    </div>
                    <label>Allow Cheat Sheet</label>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
    import {AuthenticatedRequest} from "../model/authenticated-request.model";
    import {RequestMessageType} from "../constants/vue-constants";
    import AvatarConfigurator from "@/components/avatar-configurator";
    import GameConfigCarouselSelector from "@/components/game-config-carousel-selector";
    import {setCookie} from "@/services/cookie-service";
    import {LobbyPlayerDto} from "@/model/dto/lobby-player-dto";
    import ListSelector from "@/components/list-selector";
    import {GameConfig} from "@/model/game-config.model";
    import LobbyAvatar from "@/components/lobby-avatar";
    import {AssignmentModes, Roles} from "@/constants/vue-constants";
    import LanguageSelector from "@/components/language-selector";
    import HintsPerGameSelector from "@/components/hints-per-game-selector";
    import TimerContainer from "@/components/timer-container";

    export default {
        name: 'Lobby',
        components: {
            TimerContainer,
            ListSelector,
            LobbyAvatar,
            AvatarConfigurator,
            GameConfigCarouselSelector,
            LanguageSelector,
            HintsPerGameSelector
        },
        beforeMount() {
            if (this.lobby) {
                this.allowCheatSheet = this.lobby.gameConfig.allowCheatSheet;
            }
        },
        watch: {
            lobby: function (newLobby, oldLobby) {
                if (newLobby && 'gameConfig' in newLobby) {
                    this.allowCheatSheet = newLobby.gameConfig.allowCheatSheet;
                }
            }
        },
        data() {
            return {
                allowCheatSheet: false,
                timeOptions: [
                    {value: 10, label: '10 sec'},
                    {value: 20, label: '20 sec'},
                    {value: 30, label: '30 sec'},
                    {value: 45, label: '45 sec'},
                    {value: 60, label: '60 sec'}
                ],
                assigmentModeOptions: [
                    {value: AssignmentModes.ASSIGNEE_KNOWN, label: 'Identity assigned to known player'},
                    {value: AssignmentModes.SELECT_ASSIGNEE, label: 'Pick player and assign identity'},
                    {value: AssignmentModes.FULL_RANDOM, label: 'Identity assigned to random player'}
                ],
                editingAvatarElementType: null,
                copiedToClipboard: false
            }
        },
        methods: {
            onLobbyCopyShareLink: function () {
                if (!this.copiedToClipboard) {
                    const link = location.href;
                    navigator.clipboard.writeText(link).then(function () {
                        this.copiedToClipboard = true;
                        setTimeout(function () {
                            this.copiedToClipboard = false;
                        }.bind(this), 1500)
                    }.bind(this), function () {
                        this.copiedToClipboard = false;
                    });
                    document.execCommand("copy");
                }
            },
            togglePlayerReady: function () {
                const changeReadyStateRequest = new AuthenticatedRequest({
                    type: RequestMessageType.PLAYER_IN_LOBBY_READY,
                    playerAuthentication: this.$store.state.playerAuthentication,
                    gameSessionId: this.$store.state.gameSessionId,
                    data: !this.localLobbyPlayer.ready
                });
                this.$websocketService.sendMessage(changeReadyStateRequest);
            },
            startGame: function () {
                if (this.gameIsReadyToStart) {
                    this.sendStartGame();
                }
            },
            updateTimeToAnswer: function (value) {
                const updateGameConfig = {...this.$store.state.lobby.gameConfig};
                updateGameConfig.timeToAnswer = value;
                this.sendGameConfigUpdate(updateGameConfig);
            },
            updateTimePerQuestion: function (value) {
                const updateGameConfig = {...this.$store.state.lobby.gameConfig};
                updateGameConfig.timePerQuestion = value;
                this.sendGameConfigUpdate(updateGameConfig);
            },
            updateAllowCheatSheet: function () {
                if (this.localLobbyPlayer.role === Roles.HOST || this.lobby.termAssignmentStartsTimer) {
                    const updateGameConfig = {...this.$store.state.lobby.gameConfig};
                    updateGameConfig.allowCheatSheet = !this.allowCheatSheet;
                    this.sendGameConfigUpdate(updateGameConfig);
                }
            },
            onGuessedTermSelectionChange: function (selectedTerm) {
                const updateGameConfig = {...this.$store.state.lobby.gameConfig};
                updateGameConfig.termSelectionMode = selectedTerm;
                this.sendGameConfigUpdate(updateGameConfig);
            },
            onHintSelectionChange: function (hintCount) {
                const updateGameConfig = {...this.$store.state.lobby.gameConfig};
                updateGameConfig.hintsPerPlayer = hintCount;
                this.sendGameConfigUpdate(updateGameConfig);
            },
            sendGameConfigUpdate: function (updatedGameConfig) {
                const changeReadyStateRequest = new AuthenticatedRequest({
                    type: RequestMessageType.HOST_UPDATE_GAME_CONFIG_IN_LOBBY,
                    playerAuthentication: this.$store.state.playerAuthentication,
                    gameSessionId: this.$store.state.gameSessionId,
                    data: new GameConfig(updatedGameConfig)
                });
                this.$websocketService.sendMessage(changeReadyStateRequest);
            },
            sendStartGame: function () {
                const startGameRequest = new AuthenticatedRequest({
                    type: RequestMessageType.START_GAME_IN_LOBBY,
                    playerAuthentication: this.$store.state.playerAuthentication,
                    gameSessionId: this.$store.state.gameSessionId,
                    data: null
                });
                this.$websocketService.sendMessage(startGameRequest);
            },
            avatarConfiguratorToggle: function (value) {
                this.editingAvatarElementType = value;
            },
            onGameLanguageChange: function (language) {
                const updatedLobby = {...this.$store.state.lobby};
                updatedLobby.gameConfig.language = language;
                this.$store.commit('updateLobby', updatedLobby);
                this.sendGameConfigUpdate(updatedLobby.gameConfig);
            },
            onAvatarConfiguratorChange: function (glbCookieUpdate) {
                setCookie('wtfi_globalPlayer', JSON.stringify(glbCookieUpdate));
                const changeReadyStateRequest = new AuthenticatedRequest({
                    type: RequestMessageType.UPDATE_PLAYER_IN_LOBBY,
                    playerAuthentication: this.$store.state.playerAuthentication,
                    gameSessionId: this.$store.state.gameSessionId,
                    data: new LobbyPlayerDto({
                        ...this.localLobbyPlayer,
                        avatar: glbCookieUpdate.avatar,
                        name: glbCookieUpdate.name
                    })
                });
                this.$websocketService.sendMessage(changeReadyStateRequest);
            }
        },
        computed: {
            gameIsReadyToStart: function () {
                return this.lobby && this.lobby.lobbyPlayers.length > 1 && this.lobby.lobbyPlayers.every(p => p.ready);
            },
            sortedPlayers: function () {
                return this.lobby ? [...this.lobby?.lobbyPlayers] : [];
            },
            localPlayerId: function () {
                return this.$store.state.playerId;
            },
            localLobbyPlayer: function () {
                return this.$store.state.lobby?.lobbyPlayers?.find(lp => lp.id === this.localPlayerId);
            },
            localPlayerIsHost: function () {
                const localLobbyPlayer = this.localLobbyPlayer;
                return localLobbyPlayer ? (localLobbyPlayer.role === 'host') : false;
            },
            lobby: function () {
                return this.$store.state.lobby;
            },
            timeToAnswer: function () {
                return this.$store.state.lobby.gameConfig.timeToAnswer;
            },
            timePerQuestion: function () {
                return this.$store.state.lobby.gameConfig.timePerQuestion;
            },
            language: function () {
                return this.$store.state.lobby.gameConfig.language;
            },
            localPlayerConfig: function () {
                return {...this.localLobbyPlayer, language: this.language};
            },
            readyPlayersCount: function () {
                return this.lobby ? this.lobby.lobbyPlayers.filter(p => p.ready).length : 0;
            },
            playersCount: function () {
                return this.lobby ? this.lobby.lobbyPlayers.length : 0;
            },
            displayedAssignmentModeOptions: function () {
                return this.assigmentModeOptions.map(option => {
                    const newOption = {...option, enabled: true}
                    if (this.playersCount <= 2) {
                        if (option.value !== AssignmentModes.ASSIGNEE_KNOWN) {
                            newOption.enabled = false;
                        }
                    }
                    return newOption;
                });
            }
        }
    }
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped lang="scss">
    .lobby-wrapper {
        width: 90%;
        max-width: 1800px;
        display: grid;
        grid-template-columns: 1fr min-content min-content;
        grid-template-rows: 100%;
        grid-gap: 2vw;
        padding: 1%;
        margin: 1%;
        overflow: hidden;
        background: #0000001c;
        border-radius: 10px;
    }

    .lobby-title {
        justify-self: center;
        padding: 10px;
        color: #a295dea6;
    }

    .player-list-section {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .player-list-container {
        width: 100%;
        display: flex;
        flex-wrap: wrap;
        padding: 5px;
        overflow-y: auto;
    }

    .lobby-players-transition-item {
        transition: all 0.5s ease;
    }

    .lobby-players-transition-leave-active {

    }

    .lobby-players-transition-leave-to {
        opacity: 0;
        transform: scale(0.1);
    }

    .lobby-players-transition-enter-from {
        opacity: 0;
        transform: scale(0.1);
    }

    .local-player-section {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
    }


    .game-settings-section {
        width: 300px;
        display: flex;
        flex-direction: column;
        justify-self: center;
        align-self: center;
        align-items: center;
        font-size: 15px;
        position: relative;
    }

    .game-settings-content {
        display: flex;
        flex-direction: column;
        border-radius: 22px;
        color: var(--primary-light-text-color);
        text-align: center;

<<<<<<< HEAD
        .config-title {
            padding: 5px 0;
            font-size: min(max(12px, 2.5vw), 18px);
            line-height: min(max(12px, 2.5vw), 18px);
            height: min-content;
        }

        .language-wrapper, .time-to-post-question-wrapper, .time-to-answer-wrapper, .identity-assignment-wrapper {
            display: flex;
            flex-direction: column;
            background: #ffc8ff7a;
            border-radius: 10px;
=======
        .language-wrapper {
            background: #9d81d5;
            border-radius: 20px;
            padding: 0px 10px 10px 10px;
        }

        .time-to-post-question-wrapper {
            background: #9d81d5;
            border-radius: 20px;
            padding: 0px 10px 10px 10px;
            margin-top: 10px;
        }

        .time-to-answer-wrapper {
            background: #9d81d5;
            border-radius: 20px;
            padding: 0px 10px 10px 10px;
            margin-top: 10px;
        }

        .identity-assignment-wrapper {
            background: #9d81d5;
            border-radius: 20px;
>>>>>>> origin/feature/Tisch17.10
            padding: 0px 10px 10px 10px;
            margin: 0.5vh;
        }
    }

    @media only screen and (max-aspect-ratio: 1/1) {
        .lobby-wrapper {
            grid-template-columns: 100%;
            grid-template-rows: max-content auto max-content;
            border: none;
            box-shadow: unset;
            overflow-x: hidden;
            overflow-y: auto;
            width: 98%;
        }
        .game-settings-section {
            font-size: 12px !important;
            line-height: 17px !important;
            margin-bottom: 50px;
        }
    }


    .allow-cheat-sheet-selection {
        display: flex;
        align-items: center;
        cursor: pointer;
        align-self: center;

        &.disabled {
            cursor: not-allowed;
        }

        .pseudo-checkbox {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 25px;
            height: 25px;
            border-radius: 4px;
            box-shadow: 2px 2px 2px 1px #4a2e9e;
            margin: 10px;
            background-color: white;
            overflow: visible;

            img {
                width: 130%;
                height: 130%;
                min-width: 130%;
                min-height: 130%;
            }
        }

        label {
            margin: 10px;
        }
    }

    .language-selector {
        font-family: bungee;
        background-color: var(--primary-dark-transparent-color);
        border: none;
        border-radius: 15px;
        color: white;
        -webkit-appearance: none;
        -moz-text-align-last: center;
        text-align-last: center;
        opacity: 0.9;
        z-index: 9999;
        cursor: pointer;
        padding: 10px;
        line-height: 16px;
        font-size: 16px;
        width: 100%;
    }

    .language-selector:hover {
        opacity: 1;
    }

    .game-starts-timer-text {
        display: flex;
        width: max-content;
        text-align: center;
        color: white;
        text-shadow: calc(2px + 0.1vw) calc(2px + 0.1vw) calc(2px + 0.1vw) black;
    }

    .lobby-message-group-item {
        font-size: calc(10px + 1vw);
        line-height: calc(10px + 1vw);
        width: max-content;
        text-align: center;
        min-width: 300px;
        text-shadow: calc(2px + 0.1vw) calc(2px + 0.1vw) calc(2px + 0.1vw) black;
        transition: all .3s ease 0s;

        &.multiple-items {
            display: flex;
        }
    }


    .lobby-message-group-leave-to {
        opacity: 0;
        margin-left: -100%;
    }

    .lobby-message-group-leave-active {
    }

    .lobby-message-group-enter-active {
        opacity: 0;
        margin-left: -100%;
    }

    .lobby-copied-to-clipboard {
        top:15px;
        position: absolute;
        padding: 5px;
        background-color: black;
        border-radius: 8px;
        animation: fade-lobby-copy-icon 0.2s linear;
        z-index: 99;
        line-height: 15px;
        @keyframes fade-lobby-copy-icon {
            0% {
                opacity: 0;
            }
            100% {
                opacity: 1;
            }
        }
    }

    .lobby-copy-to-clipboard {

        img {
            width: min(max(14px, 2vw),25px);
            margin-right: 8px;
        }

        &.hide-copy-btn {
            opacity: 0;
        }
    }

    .lobby-start-game-btn {
        img {
            width: 31px;
            margin-right: 8px;
        }
    }

</style>
