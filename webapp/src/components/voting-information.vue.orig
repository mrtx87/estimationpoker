<template>
    <div class="voting-information-wrapper">
        <timer class="estimation-timer" v-bind:timer="estimation?.timer"></timer>
        <general-input class="heading2"
                       v-bind:text="room?.currentEstimation.title"
                       v-bind:isDisabled="!isLocalUserModerator"
<<<<<<< HEAD
                       v-bind:placeholder=" tl8('voting.information.name.for.estimation')"
=======
                       v-bind:placeholder="'Name der SchÃ¤tzung'"
                       v-bind:validation="{message: tl8('validation.text.room.title'), isValid: (text) => text.length > 1 && text.length <= 40}"
>>>>>>> tile_version
                       v-on:onTextInputChange="updateEstimationTitle($event)"></general-input>

        <div class="voting-info-row">
            <span class="fat" v-if="votingState === VOTING_STATE.VOTING">{{ tl8('voting-information.estimation-underway')}}</span>
            <span v-if="votingState === VOTING_STATE.VOTING">{{ tl8('voting-information.voters-count', [votes.length,onlinePlayers.length]) }}
            </span>

        </div>
        <div class="voting-info-row">
            <span class="fat" v-if="votingState === VOTING_STATE.REVEALED">{{ tl8('voting-information.evaluation-phase')}}:</span>
            <span v-if="votingState === VOTING_STATE.REVEALED">{{ tl8('voting-information.average-estimated-value', [estimation.evaluation.avg]) }}
            </span>
        </div>


    </div>
</template>

<script>

import {useAppStateStore} from "@/stores/app-state";
import {RequestMessageType, Roles, VOTING_STATE} from "@/constants/vue-constants";
import Timer from "@/components/timer.vue";
import GeneralInput from "@/components/general-input.vue";
import {languageService} from "@/services/language";

export default {
    name: "voting-information",
    components: {GeneralInput, Timer},
    created() {
        this.appStore = useAppStateStore();
    },
    data: function () {
        return {
            appStore: null,
        }
    },
    methods: {
        tl8(key, vars) {
          return languageService.t(key, this.appStore.langKey, vars);
        },
        updateEstimationTitle(value) {
            this.$websocketService.sendAuthenticatedRequest(RequestMessageType.CHANGE_ESTIMATION_TITLE, {
                estimationId: this.room.currentEstimation.id,
                title: value
            })
        },
        tl8(key) {
            return languageService.t(key, this.appStore.langKey);
        },
    },
    computed: {
        VOTING_STATE() {
            return VOTING_STATE
        },
        votes() {
            return this.appStore.room ? this.appStore.room.currentEstimation.votes.filter(vote => this.onlinePlayers.find(p => p.id === vote.userId && p.roles.includes(Roles.PLAYER))) : [];
        },
        players() {
            return this.appStore.users ? this.appStore.users.filter(u => u.roles.includes(Roles.PLAYER)) : [];
        },
        onlinePlayers() {
            return this.players.filter(u => this.appStore.room.connections.includes(u.id));
        },
        votingState() {
            return this.appStore.room ? this.appStore.room.currentEstimation.state : 0;
        },
        estimation() {
            return this.appStore.room ? this.appStore.room.currentEstimation : null;
        },
        isLocalUserModerator() {
            return this.localUser?.roles.includes(Roles.MODERATOR);
        },
        room() {
            return this.appStore.room;
        },
        localUser() {
            return this.appStore.localUser;
        }
    }
};
</script>

<style lang="scss">

.voting-information-wrapper {
  position: relative;
  box-sizing: border-box;
  background-color: var(--primary-color);
  align-items: center;
  justify-content: center;
  text-align: center;
  display: flex;
  border-radius: 4px;
  flex-direction: column;
  width: 100%;
  max-width: 900px;
  justify-self: center;
  padding: 5px;
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);

  .voting-info-row {
    display: flex;
    flex-wrap: wrap;
    gap: 0 8px;
    justify-content: center;
    font-size: 13px;
  }

  .estimation-timer {
    font-size: 16px;
    justify-self: center;
    position: absolute;
    right: 10px;
    top: 5px;
  }

  .fat {
    font-weight: bold;
    font-style: italic;
    margin-bottom: 5px;
  }
}

@media only screen and (max-width: 775px) {
  .voting-info-row {
    font-size: 12px !important;
  }
}

</style>
